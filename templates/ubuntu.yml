# vim: set expandtab shiftwidth=2 tabstop=8 textwidth=0:
#
# THIS FILE IS GENERATED, DO NOT EDIT

# This template will create a ubuntu image based on the following variables:
#
#  - FDO_DISTRIBUTION_VERSION:  the ubuntu version (19.10, 18.04, etc...)
#  - FDO_DISTRIBUTION_PACKAGES: if set, list of packages that needs to be installed
#  - FDO_DISTRIBUTION_EXEC:     if set, this command will be run once the packages have
#                               been installed
#  - FDO_UPSTREAM_REPO:         the upstream project on this gitlab instance
#                               where we might find the given tag (for example:
#                               `wayland/weston`)
#  - FDO_REPO_SUFFIX:           The repository name suffix after ".../ubuntu/".
#                               If this variable isn't defined,
#                               "$FDO_DISTRIBUTION_VERSION" is used for the suffix.
#  - FDO_DISTRIBUTION_TAG:      tag to copy the image from the upstream registry. If the
#                               tag does not exist, create a new build and tag it
#  - FDO_CACHE_DIR:             A directory that needs to be mounted as `/cache` during
#                               $FDO_DISTRIBUTION_EXEC stage. Defaults to `/cache` from the
#                               host, so that most users should not need this.
#
# The resulting image will be pushed in the local registry, under:
#     $CI_REGISTRY_IMAGE/ubuntu/$FDO_REPO_SUFFIX:$FDO_DISTRIBUTION_TAG
#
# Two flavors of templates are available:
#   - `.fdo.container-build@ubuntu`: this will force rebuild a new container
#     and tag it with $FDO_DISTRIBUTION_TAG without checks
#   - `.fdo.container-ifnot-exists@ubuntu`: this will rebuild a new container
#     only if $FDO_DISTRIBUTION_TAG is not available in the local registry or
#     in the $FDO_UPSTREAM_REPO registry

# we cannot reuse exported variables in after_script,
# so let's have a common definition
.fdo.ubuntu_vars: &fdo_distro_vars |
        # exporting templates variables
        # https://gitlab.com/gitlab-com/support-forum/issues/4349
        export BUILDAH_FORMAT=docker
        export DISTRO=ubuntu
        export DISTRO_TAG=$FDO_DISTRIBUTION_TAG
        export DISTRO_VERSION="$FDO_DISTRIBUTION_VERSION"
        export DISTRO_EXEC=$FDO_DISTRIBUTION_EXEC
        if [ x"$FDO_REPO_SUFFIX" == x"" ] ;
        then
                export FDO_REPO_SUFFIX=$DISTRO_VERSION
        fi
        export BUILDAH_RUN="buildah run --isolation chroot"
        export BUILDAH_COMMIT="buildah commit --format docker"
        export CACHE_DIR=${FDO_CACHE_DIR:-/cache}


.fdo.container-build@ubuntu:
  image: $CI_REGISTRY/wayland/ci-templates/buildah:2020-03-04
  stage: build
  script:
    # log in to the registry
  - podman login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

  - *fdo_distro_vars
  - if [[ x"$DISTRO_TAG" == x"" ]] ;
    then
      echo $DISTRO tag missing;
      exit 1;
    fi
  - echo Building $DISTRO/$FDO_REPO_SUFFIX:$DISTRO_TAG from $DISTRO:$DISTRO_VERSION
    # initial set up: take the base image, update it and install the packages
  - buildcntr=$(buildah from $DISTRO:$DISTRO_VERSION)
  - buildmnt=$(buildah mount $buildcntr)

  - echo 'path-exclude=/usr/share/doc/*' > $buildmnt/etc/dpkg/dpkg.cfg.d/99-exclude-cruft
  - echo 'path-exclude=/usr/share/locale/*' >> $buildmnt/etc/dpkg/dpkg.cfg.d/99-exclude-cruft
  - echo 'path-exclude=/usr/share/man/*' >> $buildmnt/etc/dpkg/dpkg.cfg.d/99-exclude-cruft
  - echo 'APT::Install-Recommends "false";' > $buildmnt/etc/apt/apt.conf
  - echo '#!/bin/sh' > $buildmnt/usr/sbin/policy-rc.d
  - echo 'exit 101' >> $buildmnt/usr/sbin/policy-rc.d
  - chmod +x $buildmnt/usr/sbin/policy-rc.d

  - $BUILDAH_RUN $buildcntr env DEBIAN_FRONTEND=noninteractive apt-get update
  - $BUILDAH_RUN $buildcntr env DEBIAN_FRONTEND=noninteractive apt-get -y dist-upgrade

  - if [[ x"$FDO_DISTRIBUTION_PACKAGES" != x"" ]] ;
    then
      $BUILDAH_RUN $buildcntr env DEBIAN_FRONTEND=noninteractive apt-get install -y $FDO_DISTRIBUTION_PACKAGES ;
    fi

    # check if there is an optional post install script and run it
  - if [[ x"$DISTRO_EXEC" != x"" ]] ;
    then
      echo Running $DISTRO_EXEC ;
      set -x ;
      mkdir $buildmnt/tmp/clone ;
      pushd $buildmnt/tmp/clone ;
      git init ;
      git remote add origin $CI_REPOSITORY_URL ;
      git fetch --depth 1 origin $CI_COMMIT_SHA ;
      git checkout FETCH_HEAD  > /dev/null;
      buildah config --workingdir /tmp/clone --env HOME="$HOME" $buildcntr ;
      if [ -e $CACHE_DIR ] ;
      then
        CACHE="-v $CACHE_DIR:/cache:rw,shared,z" ;
      fi ;
      $BUILDAH_RUN $CACHE $buildcntr bash -c "set -x ; $DISTRO_EXEC" ;
      popd ;
      rm -rf $buildmnt/tmp/clone ;
      set +x ;
    fi

    # do not store the packages database, it's pointless
  - $BUILDAH_RUN $buildcntr env DEBIAN_FRONTEND=noninteractive apt-get clean
  - $BUILDAH_RUN $buildcntr rm -f /var/lib/apt/lists/*.lz4

    # set up the working directory
  - mkdir -p $buildmnt/app
  - buildah config --workingdir /app $buildcntr
    # umount the container, not required, but, heh
  - buildah unmount $buildcntr
    # tag the current container
  - $BUILDAH_COMMIT $buildcntr $CI_REGISTRY_IMAGE/$DISTRO/$FDO_REPO_SUFFIX:$DISTRO_TAG
    # clean up the working container
  - buildah rm $buildcntr

    # push the container image to the registry
    # There is a bug when pushing 2 tags in the same repo with the same base:
    # this may fail. Just retry it after.
  - export JOB_TAG="${DISTRO_TAG}-built-by-job-${CI_JOB_ID}"
  - podman push $CI_REGISTRY_IMAGE/$DISTRO/$FDO_REPO_SUFFIX:$DISTRO_TAG
                $CI_REGISTRY_IMAGE/$DISTRO/$FDO_REPO_SUFFIX:$JOB_TAG || true
  - sleep 2
  - podman push $CI_REGISTRY_IMAGE/$DISTRO/$FDO_REPO_SUFFIX:$DISTRO_TAG
                $CI_REGISTRY_IMAGE/$DISTRO/$FDO_REPO_SUFFIX:$JOB_TAG || true

    # Push the final tag
  - podman push $CI_REGISTRY_IMAGE/$DISTRO/$FDO_REPO_SUFFIX:$DISTRO_TAG || true
  - sleep 2
  - podman push $CI_REGISTRY_IMAGE/$DISTRO/$FDO_REPO_SUFFIX:$DISTRO_TAG

.fdo.container-build@ubuntu@arm64v8:
  extends: .fdo.container-build@ubuntu
  image: $CI_REGISTRY/wayland/ci-templates/arm64v8/buildah:2020-03-04
  tags:
    - aarch64


.fdo.qemu-build@ubuntu:
  extends: .fdo.container-build@ubuntu
  tags:
    - kvm
  image: $CI_REGISTRY/wayland/ci-templates/fedora/qemu-mkosi-base:2020-03-04
  script:
  # log in to the registry
  - podman login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

  - *fdo_distro_vars

  # start our current base mkosi image
  - /bin/bash /app/start_vm.sh -cdrom /app/my-seed.iso

  - QEMU_VERSION=$FDO_DISTRIBUTION_VERSION

  # for ubuntu, we need to use the name, not the number
  - |
    declare -A versions
    versions["4.10"]=warty
    versions["5.04"]=hoary
    versions["5.10"]=breezy
    versions["6.06"]=dapper
    versions["6.10"]=edgy
    versions["7.04"]=feisty
    versions["7.10"]=gutsy
    versions["8.04"]=hardy
    versions["8.10"]=intrepid
    versions["9.04"]=jaunty
    versions["9.10"]=karmic
    versions["10.04"]=lucid
    versions["10.10"]=maverick
    versions["11.04"]=natty
    versions["11.10"]=oneiric
    versions["12.04"]=precise
    versions["12.10"]=quantal
    versions["13.04"]=raring
    versions["13.10"]=saucy
    versions["14.04"]=trusty
    versions["14.10"]=utopic
    versions["15.04"]=vivid
    versions["15.10"]=wily
    versions["16.04"]=xenial
    versions["16.10"]=yakkety
    versions["17.04"]=zesty
    versions["17.10"]=artful
    versions["18.04"]=bionic
    versions["18.10"]=cosmic
    versions["19.04"]=disco
    versions["19.10"]=eoan
    versions["20.04"]=focal
  - if [[ x"${versions[$FDO_DISTRIBUTION_VERSION]}" != x"" ]] ;
    then
      QEMU_VERSION=${versions["$FDO_DISTRIBUTION_VERSION"]} ;
    fi

  - |
    cat <<EOF > mkosi.default
    [Distribution]
    Distribution=ubuntu
    Release=$QEMU_VERSION

    [Output]
    Format=gpt_ext4
    Bootable=yes
    BootProtocols=bios
    Password=root
    KernelCommandLine=!* selinux=0 audit=0 rw console=tty0 console=ttyS0

    [Partitions]
    RootSize=2G

    [Packages]
    # The packages to appear in both the build and the final image
    Packages=
      openssh-client
      openssh-server
      network-manager
      iproute2
      git
    EOF

  - echo $FDO_DISTRIBUTION_PACKAGES | tr ' ' '\n' | sed -e 's/^/  /' >> mkosi.default

  # create a new ssh key
  - ssh-keygen -t rsa -f /root/.ssh/id_rsa_target -N ''
  - mkdir -p mkosi.extra/root/.ssh
  - chmod 700 mkosi.extra/root/.ssh
  - cp /root/.ssh/id_rsa_target.pub mkosi.extra/root/.ssh/authorized_keys
  - chmod 600 mkosi.extra/root/.ssh/authorized_keys

  # ubuntu disables NetworkManager through /usr/lib/NetworkManager/conf.d/10-globally-managed-devices.conf
  # overwrite it in /etc to allow NM to manage ens3
  - mkdir -p mkosi.extra/etc/NetworkManager/conf.d/
  - touch mkosi.extra/etc/NetworkManager/conf.d/10-globally-managed-devices.conf

  # enable sshd on the target
  - mkdir -p mkosi.extra/etc/systemd/system/multi-user.target.wants

  # send the mkosi files to the VM
  - scp -P 5555 mkosi.default localhost:/root/mkosi.default
  - scp -P 5555 -r mkosi.extra localhost:/root/

  # enable sshd on the target
  - ssh localhost -p 5555 ln -s /usr/lib/systemd/system/sshd.service
                                mkosi.extra/etc/systemd/system/multi-user.target.wants/sshd.service

  # create a cache folder (useful only when manually testing this script)
  - ssh localhost -p 5555 mkdir mkosi.cache

  # run mkosi in the VM!
  - ssh localhost -p 5555 mkosi/mkosi

  # mount the root partition locally to extract the kernel and initramfs
  - ssh localhost -p 5555 mkdir loop
  - offset=$(ssh localhost -p 5555 fdisk -l image.raw | grep image.raw2 | cut -d ' ' -f 3)
  - ssh localhost -p 5555 mount -o ro,loop,offset=$(($offset * 512)) image.raw loop/

  # fetch kernel and initramfs
  - ssh localhost -p 5555 ls loop/boot/
  - ssh localhost -p 5555 "cp loop/boot/vmlinuz* loop/boot/initr* ."

  - ssh localhost -p 5555 umount loop/

  # now compress the image (we wanted to extract first the kernel and initrd)
  - ssh localhost -p 5555 xz -T0 image.raw

  # fetch the image and kernel
  - scp -P 5555 localhost:image.raw.xz dest-image.raw.xz

  - scp -P 5555 localhost:vmlinuz\* localhost:initr\* .

  # terminate qemu
  - kill $(pgrep qemu) || true

  # building the final image
  - |
    cat > /etc/containers/storage.conf <<EOF
    [storage]
    driver = "vfs"
    runroot = "/var/run/containers/storage"
    graphroot = "/var/lib/containers/storage"
    EOF

  - QEMU_BASE_IMAGE=${QEMU_BASE_IMAGE:-$CI_REGISTRY/wayland/ci-templates/fedora/qemu-base:2020-03-04}

  - echo Building $DISTRO/$FDO_REPO_SUFFIX:$DISTRO_TAG from $QEMU_BASE_IMAGE

  - buildcntr=$(buildah from $QEMU_BASE_IMAGE)
  - buildmnt=$(buildah mount $buildcntr)

  # insert our final VM image we just built
  - mkdir -p $buildmnt/app
  - mv dest-image.raw.xz $buildmnt/app/image.raw.xz
  - mv vmlinuz* initr* $buildmnt/app/
  - mkdir $buildmnt/root/.ssh
  - chmod 700 $buildmnt/root/.ssh
  - cp /root/.ssh/id_rsa_target $buildmnt/root/.ssh/id_rsa
  - cp /root/.ssh/id_rsa_target.pub $buildmnt/root/.ssh/id_rsa.pub

  - |
    cat > $buildmnt/app/start_vm_kernel.sh <<EOF
    #!/bin/bash

    set -x

    KERNEL=\$1
    shift

    set -e

    if [[ x"\$KERNEL" == x"" ]]
    then
      KERNEL=\$(ls /app/vmlinuz* | sort | tail -1)
    fi

    INITRD=\$(ls /app/initr* | sort | tail -1)

    bash /app/start_vm.sh -kernel \$KERNEL \\
                          -initrd \$INITRD \\
                          -append "root=/dev/sda2 selinux=0 audit=0 rw console=tty0 console=ttyS0" \\
                          "\$@"

    EOF
  - chmod +x $buildmnt/app/start_vm_kernel.sh

    # umount the container, not required, but, heh
  - buildah unmount $buildcntr

    # tag the current container
  - $BUILDAH_COMMIT $buildcntr $CI_REGISTRY_IMAGE/$DISTRO/$FDO_REPO_SUFFIX:$DISTRO_TAG

    # clean up the working container
  - buildah rm $buildcntr

    # push the container image to the registry
    # There is a bug when pushing 2 tags in the same repo with the same base:
    # this may fail. Just retry it after.
  - podman push $CI_REGISTRY_IMAGE/$DISTRO/$FDO_REPO_SUFFIX:$DISTRO_TAG || true
  - sleep 2
  - podman push $CI_REGISTRY_IMAGE/$DISTRO/$FDO_REPO_SUFFIX:$DISTRO_TAG

.fdo.before_script_ifnot_exists: &fdo_before_script_ifnot_exists
  before_script:
    # log in to the registry
    - podman login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

    - *fdo_distro_vars

    # to be able to test the following script in the CI of the ci-templates
    # project itself, we need to put a special case here to have a
    # different image to pull if it already exists
    - export REPO_SUFFIX_LOCAL=$FDO_REPO_SUFFIX
    - if [[ x"$REPO_SUFFIX_LOCAL" == x"ci_templates_test_upstream" ]] ;
      then
        export FDO_REPO_SUFFIX=${DISTRO_VERSION} ;
      fi

    # check if our image is already in the current registry
    - skopeo inspect docker://$CI_REGISTRY_IMAGE/$DISTRO/$REPO_SUFFIX_LOCAL:$DISTRO_TAG > /dev/null && exit 0 || true
    # check if our image is already in the upstream registry
    - if [[ -z "$FDO_UPSTREAM_REPO" ]];
      then
        echo "WARNING! Variable \$FDO_UPSTREAM_REPO is undefined, cannot check for images" ;
      else
        skopeo inspect docker://$CI_REGISTRY/$FDO_UPSTREAM_REPO/$DISTRO/$FDO_REPO_SUFFIX:$DISTRO_TAG > /dev/null && touch .upstream || true ;
      fi
    # copy the original image into the current project registry namespace
    # we do 2 attempts with skopeo copy at most
    - if [ -f .upstream ] ;
      then
        skopeo copy --dest-creds $CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD
                    docker://$CI_REGISTRY/$FDO_UPSTREAM_REPO/$DISTRO/$FDO_REPO_SUFFIX:$DISTRO_TAG
                    docker://$CI_REGISTRY_IMAGE/$DISTRO/$REPO_SUFFIX_LOCAL:$DISTRO_TAG ||
        skopeo copy --dest-creds $CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD
                    docker://$CI_REGISTRY/$FDO_UPSTREAM_REPO/$DISTRO/$FDO_REPO_SUFFIX:$DISTRO_TAG
                    docker://$CI_REGISTRY_IMAGE/$DISTRO/$REPO_SUFFIX_LOCAL:$DISTRO_TAG ;

        exit 0 ;
      fi


.fdo.container-ifnot-exists@ubuntu:
  extends: .fdo.container-build@ubuntu
  <<: *fdo_before_script_ifnot_exists


.fdo.container-ifnot-exists@ubuntu@arm64v8:
  extends: .fdo.container-ifnot-exists@ubuntu
  image: $CI_REGISTRY/wayland/ci-templates/arm64v8/buildah:2020-03-04
  tags:
    - aarch64

.fdo.qemu-ifnot-exists@ubuntu:
  extends: .fdo.qemu-build@ubuntu
  <<: *fdo_before_script_ifnot_exists

