# vim: set expandtab shiftwidth=2 tabstop=8 textwidth=0:
#
# {{ warning }}

variables:
  FDO_DISTRIBUTION_PACKAGES: 'wget curl'
  FDO_DISTRIBUTION_EXEC: '{{ script }}'


################################################################################
#
# {{distribution.title()}} checks
#
################################################################################


#
# A few templates to avoid writing the image and stage in each job
#
.{{distribution}}:ci@container-build:
  extends: .fdo.container-build@{{distribution}}
  image: $CI_REGISTRY_IMAGE/buildah:$BOOTSTRAP_TAG
  stage: {{distribution}}_container_build
  needs:
    - bootstrap
    - sanity check


.{{distribution}}:ci@container-ifnot-exists:
  extends: .fdo.container-ifnot-exists@{{distribution}}
  image: $CI_REGISTRY_IMAGE/buildah:$BOOTSTRAP_TAG
  stage: {{distribution}}_container_build
  needs:
    - bootstrap
    - sanity check

{% if aarch64 %}

.{{distribution}}:ci@container-build@arm64v8:
  extends: .fdo.container-build@{{distribution}}@arm64v8
  image: $CI_REGISTRY_IMAGE/arm64v8/buildah:$BOOTSTRAP_TAG
  stage: {{distribution}}_container_build
  needs:
    - bootstrap@arm64v8
    - sanity check


.{{distribution}}:ci@container-ifnot-exists@arm64v8:
  extends: .fdo.container-ifnot-exists@{{distribution}}@arm64v8
  image: $CI_REGISTRY_IMAGE/arm64v8/buildah:$BOOTSTRAP_TAG
  stage: {{distribution}}_container_build
  needs:
    - bootstrap@arm64v8
    - sanity check
{% endif %}
{% if qemu %}

#
# Qemu build
#
.{{distribution}}:ci@qemu-build:
  extends: .fdo.qemu-build@{{distribution}}
  image: $CI_REGISTRY_IMAGE/fedora/qemu-mkosi-base:$QEMU_TAG
  stage: {{distribution}}_container_build
  artifacts:
    name: logs-$CI_PIPELINE_ID
    when: always
    expire_in: 1 week
    paths:
      - console.out
  needs:
    - bootstrap-qemu-mkosi
    - sanity check
{% endif %}

#
# generic {{distribution}} checks
#
.{{distribution}}@check:
  stage: {{distribution}}_check
  script:
      # run both curl and wget because one of those two is installed and one is
      # in the base image, but it depends on the distro which one
    - curl --insecure https://gitlab.freedesktop.org
    - wget --no-check-certificate https://gitlab.freedesktop.org
      # make sure our test script has been run
    - if [[ -e /test_file ]] ;
      then
        echo $FDO_DISTRIBUTION_EXEC properly run ;
      else
        exit 1 ;
      fi
{% if qemu %}


.{{distribution}}@qemu-check:
  stage: {{distribution}}_check
  tags:
    - kvm
  script:
    - pushd /app
      # start the VM
    - bash /app/start_vm.sh
      # run both curl and wget because one of those two is installed and one is
      # in the base image, but it depends on the distro which one
    - ssh -p 5555 localhost curl --insecure https://gitlab.freedesktop.org
    - ssh -p 5555 localhost wget --no-check-certificate https://gitlab.freedesktop.org
      # terminate the VM
    - ssh -p 5555 localhost halt -p || true
    - sleep 2
    - kill $(pgrep qemu) || true

      # start the VM, with the kernel parameters
    - bash /app/start_vm_kernel.sh
      # make sure we can still use curl/wget
    - ssh -p 5555 localhost curl --insecure https://gitlab.freedesktop.org
    - ssh -p 5555 localhost wget --no-check-certificate https://gitlab.freedesktop.org
      # terminate the VM
    - ssh -p 5555 localhost halt -p || true
    - sleep 2
    - kill $(pgrep qemu) || true
  artifacts:
    name: logs-$CI_PIPELINE_ID
    when: always
    expire_in: 1 week
    paths:
      - console.out
{% endif %}


{# We only do the full test on the first version of the distribution #}
{# other versions have a slighter check at the end #}
#
# straight {{distribution}} build and test
#
{{distribution}}:{{ versions[0] }}@container-build:
  extends: .{{distribution}}:ci@container-build
  variables:
{% if not version %}
    FDO_DISTRIBUTION_VERSION: '{{ versions[0] }}'
{% endif %}
    FDO_DISTRIBUTION_TAG: $CI_PIPELINE_ID


{{distribution}}:{{ versions[0] }}@check:
  extends: .{{distribution}}@check
  image: $CI_REGISTRY_IMAGE/{{distribution}}/{{ versions[0] }}:$CI_PIPELINE_ID
  needs:
    - {{distribution}}:{{ versions[0] }}@container-build
    - sanity check


#
# /cache {{distribution}} check (in build stage)
#
{{distribution}}@cache-container-build:
  extends: .{{distribution}}:ci@container-build
  before_script:
      # The template normally symlinks the /cache
      # folder, but we want a fresh new one for the
      # tests.
    - mkdir runner_cache_$CI_PIPELINE_ID
    - uname -a | tee runner_cache_$CI_PIPELINE_ID/foo-$CI_PIPELINE_ID

  artifacts:
    paths:
      - runner_cache_$CI_PIPELINE_ID/*
    expire_in: 1 week

  variables:
{% if not version %}
    FDO_DISTRIBUTION_VERSION: '{{ versions[0] }}'
{% endif %}
    FDO_DISTRIBUTION_TAG: cache-$CI_PIPELINE_ID
    FDO_DISTRIBUTION_EXEC: 'bash test/test_cache.sh $CI_PIPELINE_ID'
    FDO_CACHE_DIR: $CI_PROJECT_DIR/runner_cache_$CI_PIPELINE_ID


#
# /cache {{distribution}} check (in check stage)
#
{{distribution}}@cache-check:
  stage: {{distribution}}_check
  image: alpine:latest
  script:
    # in the previous stage ({{distribution}}@cache-container-build),
    # test/test_cache.sh checked for the existance of `/cache/foo-$CI_PIPELINE_ID`
    # and if it found it, it wrote `/cache/bar-$CI_PIPELINE_ID`.
    #
    # So if we have in the artifacts `bar-$CI_PIPELINE_ID`, that means
    # 2 things:
    # - /cache was properly mounted while building the container
    # - the $FDO_CACHE_DIR has been properly written from within the
    #   building container, meaning the /cache folder has been successfully
    #   updated.
    - if [ -e $CI_PROJECT_DIR/runner_cache_$CI_PIPELINE_ID/bar-$CI_PIPELINE_ID ] ;
      then
        echo Successfully read/wrote the cache folder, all good ;
      else
        echo FAILURE while retrieving the previous artifacts ;
        exit 1 ;
      fi
  needs:
    - job: {{distribution}}@cache-container-build
      artifacts: true
    - sanity check
{% if aarch64 %}


{{distribution}}:{{ versions[0] }}@container-build@arm64v8:
  extends: .{{distribution}}:ci@container-build@arm64v8
  variables:
{% if not version %}
    FDO_DISTRIBUTION_VERSION: '{{ versions[0] }}'
{% endif %}
    FDO_DISTRIBUTION_TAG: arm64v8-$CI_PIPELINE_ID


{{distribution}}:{{ versions[0] }}@check@arm64v8:
  extends: .{{distribution}}@check
  image: $CI_REGISTRY_IMAGE/{{distribution}}/{{ versions[0] }}:arm64v8-$CI_PIPELINE_ID
  tags:
    - aarch64
  needs:
    - {{distribution}}:{{ versions[0] }}@container-build@arm64v8
    - sanity check
{% endif %}
{% if qemu %}


{{distribution}}:{{ versions[0] }}@qemu-build:
  extends: .{{distribution}}:ci@qemu-build
  variables:
{% if not version %}
    FDO_DISTRIBUTION_VERSION: '{{ versions[0] }}'
{% endif %}
    FDO_DISTRIBUTION_TAG: qemu-$CI_PIPELINE_ID
    FDO_DISTRIBUTION_PACKAGES: 'wget curl'
    QEMU_BASE_IMAGE: $CI_REGISTRY_IMAGE/fedora/qemu-base:$QEMU_TAG


{{distribution}}:{{ versions[0] }}@qemu-check:
  extends: .{{distribution}}@qemu-check
  image: $CI_REGISTRY_IMAGE/{{distribution}}/{{ versions[0] }}:qemu-$CI_PIPELINE_ID
  needs:
    - {{distribution}}:{{ versions[0] }}@qemu-build
    - sanity check
{% endif %}


#
# make sure we do rebuild the image if the tag does not exist and check
#
{{distribution}}-forced:{{ versions[0] }}@container-ifnot-exists:
  extends: .{{distribution}}:ci@container-ifnot-exists
  variables:
    FDO_UPSTREAM_REPO: $CI_PROJECT_PATH
{% if not version %}
    FDO_DISTRIBUTION_VERSION: '{{ versions[0] }}'
{% endif %}
    FDO_DISTRIBUTION_TAG: $CI_PIPELINE_IID


{{distribution}}-forced-ifnot-exists:{{ versions[0] }}@check:
  extends: .{{distribution}}@check
  image: $CI_REGISTRY_IMAGE/{{distribution}}/{{ versions[0] }}:$CI_PIPELINE_IID
  needs:
    - {{distribution}}-forced:{{ versions[0] }}@container-ifnot-exists
    - sanity check


#
# make sure we do not rebuild the image if the tag exists (during the check)
#
{{distribution}}:{{ versions[0] }}@container-ifnot-exists:
  extends: .{{distribution}}:ci@container-ifnot-exists
  stage: {{distribution}}_check
  variables:
    FDO_UPSTREAM_REPO: $CI_PROJECT_PATH
{% if not version %}
    FDO_DISTRIBUTION_VERSION: '{{ versions[0] }}'
{% endif %}
    FDO_DISTRIBUTION_TAG: $CI_PIPELINE_IID
    FDO_DISTRIBUTION_PACKAGES: 'this-package-should-not-exist'
  needs:
    - {{distribution}}-forced:{{ versions[0] }}@container-ifnot-exists
    - sanity check


#
# make sure we do not rebuild the image if the tag exists in the upstream
# repository (during the check)
# special case where FDO_REPO_SUFFIX == ci_templates_test_upstream
#
{{distribution}}:{{ versions[0] }}-upstream@container-ifnot-exists:
  extends: .{{distribution}}:ci@container-ifnot-exists
  stage: {{distribution}}_check
  variables:
    FDO_UPSTREAM_REPO: $CI_PROJECT_PATH
    FDO_REPO_SUFFIX: ci_templates_test_upstream
{% if not version %}
    FDO_DISTRIBUTION_VERSION: '{{ versions[0] }}'
{% endif %}
    FDO_DISTRIBUTION_TAG: $CI_PIPELINE_IID
    FDO_DISTRIBUTION_PACKAGES: 'this-package-should-not-exist'
  needs:
    - {{distribution}}-forced:{{ versions[0] }}@container-ifnot-exists
    - sanity check
{% if versions[1:] %}

#
# Try our {{distribution}} scripts with other versions and check
#
{% for v in versions[1:] %}

{{distribution}}:{{v}}@container-build:
  extends: .{{distribution}}:ci@container-build
  variables:
    FDO_DISTRIBUTION_VERSION: '{{v}}'
    FDO_DISTRIBUTION_TAG: $CI_PIPELINE_ID

{{distribution}}:{{v}}@check:
  extends: .{{distribution}}@check
  image: $CI_REGISTRY_IMAGE/{{distribution}}/{{v}}:$CI_PIPELINE_ID
  needs:
    - {{distribution}}:{{v}}@container-build
    - sanity check
{% endfor %}
{% endif %}
