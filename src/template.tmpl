# vim: set expandtab shiftwidth=2 tabstop=8 textwidth=0:

# This template will create a {{distribution}} image based on the following variables:
#
{% if not version %}
#  - {{DISTRIBUTION}}_VERSION: the {{distribution}} version ({{version_examples}}, etc...)
{% endif %}
#  - {{PACKAGES}}:    if set, list of packages that needs to be installed
#  - {{DISTRIBUTION}}_EXEC:    if set, this command will be run once the packages have
#                    been installed
#  - UPSTREAM_REPO:  the upstream project on this gitlab instance where we might
#                    find the given tag (for example: `wayland/weston`)
#  - REPO_SUFFIX:    The repository name suffix after ".../{{docker_repo}}/".
#                    If this variable isn't defined, "{{VERSION}}" is used for
#                    the suffix.
#  - {{DISTRIBUTION}}_TAG:     tag to copy the image from the upstream registry. If the
#                    tag does not exist, create a new build and tag it
#
# The resulting image will be pushed in the local registry, under:
#     $CI_REGISTRY_IMAGE/{{docker_repo}}/$REPO_SUFFIX:${{DISTRIBUTION}}_TAG
#
# Two flavors of templates are available:
#   - `.{{distribution}}@container-build`: this will force rebuild a new container
#     and tag it with ${{DISTRIBUTION}}_TAG without checks
#   - `.{{distribution}}@container-ifnot-exists`: this will rebuild a new container
#     only if ${{DISTRIBUTION}}_TAG is not available in the local registry or
#     in the $UPSTREAM_REPO registry

# we can not reuse exported variables in after_script,
# so have a common definition
.{{distribution}}_vars: &distro_vars |
        # exporting templates variables
        # https://gitlab.com/gitlab-com/support-forum/issues/4349
        export BUILDAH_FORMAT=docker
        export DISTRO={{docker_repo}}
        export DISTRO_TAG=${{DISTRIBUTION}}_TAG
        export DISTRO_VERSION={{VERSION}}
        export DISTRO_EXEC=${{DISTRIBUTION}}_EXEC
        if [ x"$REPO_SUFFIX" == x"" ] ;
        then
                export REPO_SUFFIX=$DISTRO_VERSION
        fi
        export BUILDAH_RUN="buildah run --isolation chroot"
        export BUILDAH_COMMIT="buildah commit --format docker"


.{{distribution}}@container-build:
  image: $CI_REGISTRY/wayland/ci-templates/buildah:latest
  stage: build
  before_script:
    # log in to the registry
    - podman login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

    - *distro_vars

  script:
  - *distro_vars
  - if [[ x"$DISTRO_TAG" == x"" ]] ;
    then
      echo $DISTRO tag missing;
      exit 1;
    fi
  - echo Building $DISTRO/$REPO_SUFFIX:$DISTRO_TAG from {{ image }}
    # initial set up: take the base image, update it and install the packages
  - buildcntr=$(buildah from {{ image }})
  - buildmnt=$(buildah mount $buildcntr)

    {% if prepare %}
      {% for command in prepare %}
  - {{command.replace(" /", " $buildmnt/")}}
      {% endfor %}

    {% endif %}
    {% for command in upgrade %}
  - $BUILDAH_RUN $buildcntr {{command}}
    {% endfor %}

  - if [[ x"${{PACKAGES}}" != x"" ]] ;
    then
      {% for command in install %}
      $BUILDAH_RUN $buildcntr {{command}} ${{PACKAGES}} ;
      {% endfor %}
    fi

    # check if there is an optional post install script and run it
  - if [[ x"$DISTRO_EXEC" != x"" ]] ;
    then
      echo Running $DISTRO_EXEC ;
      set -x ;
      mkdir $buildmnt/tmp/clone ;
      pushd $buildmnt/tmp/clone ;
      git init ;
      git remote add origin $CI_REPOSITORY_URL ;
      git fetch --depth 1 origin $CI_COMMIT_SHA ;
      git checkout FETCH_HEAD  > /dev/null;
      buildah config --workingdir /tmp/clone $buildcntr ;
      $BUILDAH_RUN $buildcntr bash -c "set -x ; $DISTRO_EXEC" ;
      popd ;
      rm -rf $buildmnt/tmp/clone ;
      set +x ;
    fi

    # do not store the packages database, it's pointless
    {% for command in clean %}
  - $BUILDAH_RUN $buildcntr {{command}}
    {% endfor %}

    # set up the working directory
  - mkdir $buildmnt/app
  - buildah config --workingdir /app $buildcntr
    # umount the container, not required, but, heh
  - buildah unmount $buildcntr
    # tag the current container
  - $BUILDAH_COMMIT $buildcntr $CI_REGISTRY_IMAGE/$DISTRO/$REPO_SUFFIX:$DISTRO_TAG
    # clean up the working container
  - buildah rm $buildcntr

    # push the container image to the registry
    # There is a bug when pushing 2 tags in the same repo with the same base:
    # this may fail. Just retry it after.
  - export JOB_TAG="${DISTRO_TAG}-built-by-job-${CI_JOB_ID}"
  - podman push $CI_REGISTRY_IMAGE/$DISTRO/$REPO_SUFFIX:$DISTRO_TAG
                $CI_REGISTRY_IMAGE/$DISTRO/$REPO_SUFFIX:$JOB_TAG || true
  - sleep 2
  - podman push $CI_REGISTRY_IMAGE/$DISTRO/$REPO_SUFFIX:$DISTRO_TAG
                $CI_REGISTRY_IMAGE/$DISTRO/$REPO_SUFFIX:$JOB_TAG || true

    # Push the final tag
  - podman push $CI_REGISTRY_IMAGE/$DISTRO/$REPO_SUFFIX:$DISTRO_TAG || true
  - sleep 2
  - podman push $CI_REGISTRY_IMAGE/$DISTRO/$REPO_SUFFIX:$DISTRO_TAG
{% if aarch64 %}

.{{distribution}}@container-build@arm64v8:
  extends: .{{distribution}}@container-build
  image: $CI_REGISTRY/wayland/ci-templates/arm64v8/buildah:latest
  tags:
    - aarch64
{% endif %}


.before_script_ifnot_exists: &before_script_ifnot_exists
  before_script:
    # log in to the registry
    - podman login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

    - *distro_vars

    # check if our image is already in the current registry
    - skopeo inspect docker://$CI_REGISTRY_IMAGE/$DISTRO/$REPO_SUFFIX:$DISTRO_TAG > /dev/null && exit 0 || true

    # copy the original image into the current project registry namespace
    - skopeo copy docker://$CI_REGISTRY/$UPSTREAM_REPO/$DISTRO/$REPO_SUFFIX:$DISTRO_TAG
                  docker://$CI_REGISTRY_IMAGE/$DISTRO/$REPO_SUFFIX:$DISTRO_TAG && exit 0 || true


.{{distribution}}@container-ifnot-exists:
  extends: .{{distribution}}@container-build
  <<: *before_script_ifnot_exists
{% if aarch64 %}


.{{distribution}}@container-ifnot-exists@arm64v8:
  extends: .{{distribution}}@container-ifnot-exists
  image: $CI_REGISTRY/wayland/ci-templates/arm64v8/buildah:latest
  tags:
    - aarch64
{% endif %}
