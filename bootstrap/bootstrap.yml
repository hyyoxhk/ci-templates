# vim: set expandtab shiftwidth=2 tabstop=8 textwidth=0:

#################################################################
#                                                               #
#                    bootstrapping stage                        #
#                                                               #
#################################################################


# we need a minimalist image capable of buildah, podman, skopeo, curl,
# jq, date and test. We used to rely on `bootstrap/bootstrap.sh`, but
# a commit in runc prevented it to be compiled against musl. So we just
# end up building a regular container image from arch.
#
# To avoid rebuilding this image at every run, and to give better control,
# BOOTSTRAP_TAG needs to be set by the caller.
.bootstrap:
  image: fedora:latest
  stage: bootstrapping
  script:
  - export BUILDAH_RUN="buildah run --isolation chroot"
  - export BUILDAH_COMMIT="buildah commit --format docker"
  # install buildah, podman and skopeo
  - dnf install -y buildah podman skopeo
  - |
    cat > /etc/containers/storage.conf <<EOF
    [storage]
    driver = "vfs"
    runroot = "/var/run/containers/storage"
    graphroot = "/var/lib/containers/storage"
    EOF

  # bug in podman?
  - podman info

  # login to the registry
  - podman login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

  # check if our image is already in the current registry
  - skopeo inspect docker://$CI_REGISTRY_IMAGE/buildah:$BOOTSTRAP_TAG > /dev/null && exit 0 || true

  # https://gitlab.com/gitlab-com/support-forum/issues/4349
  - export BUILDAH_FORMAT=docker

  - buildcntr=$(buildah from ${ARCH}fedora:30)
  - $BUILDAH_RUN $buildcntr dnf upgrade -y
  - $BUILDAH_RUN $buildcntr dnf install -y buildah podman skopeo jq git
    # do not store the packages database, it's pointless
  - $BUILDAH_RUN $buildcntr dnf clean all

    # set up the working directory
  - buildah config --workingdir /app $buildcntr
  - export buildmnt=$(buildah mount $buildcntr)
  - |
    cat > $buildmnt/etc/containers/registries.conf <<EOF
    # This is a system-wide configuration file used to
    # keep track of registries for various container backends.
    # It adheres to TOML format and does not support recursive
    # lists of registries.

    # The default location for this configuration file is /etc/containers/registries.conf.

    # The only valid categories are: 'registries.search', 'registries.insecure',
    # and 'registries.block'.

    [registries.search]
    registries = ['docker.io', 'registry.fedoraproject.org', 'quay.io', 'registry.centos.org']

    # If you need to access insecure registries, add the registry's fully-qualified name.
    # An insecure registry is one that does not have a valid SSL certificate or only does HTTP.
    [registries.insecure]
    registries = []


    # If you need to block pull access from a registry, uncomment the section below
    # and add the registries fully-qualified name.
    #
    # Docker only
    [registries.block]
    registries = []
    EOF

  - |
    cat > $buildmnt/etc/containers/policy.json <<EOF
    {
        "default": [
            {
                "type": "insecureAcceptAnything"
            }
        ],
        "transports":
            {
                "docker-daemon":
                    {
                        "": [{"type":"insecureAcceptAnything"}]
                    }
            }
    }
    EOF

  - |
    cat > $buildmnt/etc/containers/storage.conf <<EOF
    # This file is is the configuration file for all tools
    # that use the containers/storage library.
    # See man 5 containers-storage.conf for more information
    # The "container storage" table contains all of the server options.
    [storage]

    # Default Storage Driver
    driver = "vfs"

    # Temporary storage location
    runroot = "/var/run/containers/storage"

    # Primary Read/Write location of container storage
    graphroot = "/var/lib/containers/storage"
    EOF

  - $BUILDAH_RUN $buildcntr podman images || true

  # tag the current container
  - $BUILDAH_COMMIT $buildcntr $CI_REGISTRY_IMAGE/${ARCH}buildah:$BOOTSTRAP_TAG
  # clean up the working container
  - buildah rm $buildcntr
   
  - podman images

  # bug when pushing 2 tags in the same repo with the same base,
  # this may fail. Just retry it after
  - podman push $CI_REGISTRY_IMAGE/${ARCH}buildah:$BOOTSTRAP_TAG || true
  - sleep 2
  - podman push $CI_REGISTRY_IMAGE/${ARCH}buildah:$BOOTSTRAP_TAG


.bootstrap@arm64v8:
  extends: .bootstrap
  image: arm64v8/fedora:latest
  tags:
    - aarch64
  before_script:
    - export ARCH="arm64v8/"


# qemu container capable of running a VM to run the test suite
#
# To avoid rebuilding this image at every run, and to give better control,
# QEMU_TAG needs to be set by the caller.
.qemu:
  image: $CI_REGISTRY_IMAGE/buildah:$BOOTSTRAP_TAG
  stage: bootstrapping_qemu
  dependencies: []
  before_script:
  - export BUILDAH_RUN="buildah run --isolation chroot"
  - export BUILDAH_COMMIT="buildah commit --format docker"

  # login to the registry
  - podman login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

  # check if our image is already in the current registry
  - skopeo inspect docker://$CI_REGISTRY_IMAGE/qemu:$QEMU_TAG > /dev/null && exit 0 || true

  script:
  # https://gitlab.com/gitlab-com/support-forum/issues/4349
  - export BUILDAH_FORMAT=docker

  - buildcntr=$(buildah from $CI_REGISTRY_IMAGE/buildah:$BOOTSTRAP_TAG)
  - $BUILDAH_RUN $buildcntr dnf upgrade -y

  # install required packages:
  # - qemu (of course)
  # - genisoimage (to create a cloud-init iso that will help us filling in the custom parameters)
  # - sshpass (when not using cloud-init, sshpass is a nice way to ssh with password on the CLI)
  # - usbutils (for being able to call lsusb and redirect part a USB device)
  - $BUILDAH_RUN $buildcntr dnf install -y qemu genisoimage sshpass usbutils

  # do not store the packages database, it's pointless
  - $BUILDAH_RUN $buildcntr dnf clean all

  # set up the working directory
  - buildah config --workingdir /app $buildcntr
  - export buildmnt=$(buildah mount $buildcntr)
  - mkdir -p $buildmnt/app
  - |
    cat > $buildmnt/app/start_vm.sh <<EOF
    #!/bin/bash

    set -x
    set -e

    if [[ ! -e /app/image.raw ]]
    then
      xz -d /app/image.raw.xz
    fi

    if [[ ! -e ~/.ssh/id_rsa ]]
    then
      ssh-keygen -t rsa -f /root/.ssh/id_rsa -N ''
    fi

    qemu-system-x86_64 -machine accel=kvm \\
                       -smp 2 -m 1024 \\
                       -drive format=raw,file=/app/image.raw \\
                       -device virtio-net-pci,netdev=net0 \\
                       -netdev user,id=net0,hostfwd=tcp::5555-:22 \\
                       -display none \\
                       -daemonize \\
                       "\$@" \\
                       -serial file:\$CI_BUILDS_DIR/\$CI_PROJECT_PATH/console.out

    # store the host key locally
    # note: we assume the root password is "root"
    sshpass -p root ssh -o StrictHostKeyChecking=accept-new localhost -p 5555 uname -a

    # store our ssh-key in the VM
    sshpass -p root ssh-copy-id localhost -p 5555

    EOF
  - chmod +x $buildmnt/app/start_vm.sh

  # tag the current container
  - $BUILDAH_COMMIT $buildcntr $CI_REGISTRY_IMAGE/qemu:$QEMU_TAG

  # fetch the current fedora cloud image, to create our base mkosi VM
  - CLOUD_IMAGE_URL="https://download.fedoraproject.org/pub/fedora/linux/releases/30/Cloud/x86_64/images/Fedora-Cloud-Base-30-1.2.x86_64.raw.xz"
  - curl -L $CLOUD_IMAGE_URL -o $buildmnt/app/image.raw.xz

  # create a common ssh key that will be used to generate the final VM images
  # not: this will not be added to the final VM
  - $BUILDAH_RUN $buildcntr ssh-keygen -t rsa -f /root/.ssh/id_rsa -N ''

  # to start the cloud-init ready image we need to provide it some input:
  # https://blog.christophersmart.com/2016/06/17/booting-fedora-24-cloud-image-with-kvm/

  - |
    cat > $buildmnt/app/meta-data << EOF
    instance-id: Cloud00
    local-hostname: cloud-00
    EOF

  - |
    cat > $buildmnt/app/user-data << EOF
    #cloud-config
    # Set the default user
    system_info:
      default_user:
        name: cloud

    # Unlock the default and root users
    chpasswd:
      list: |
         cloud:password
         root:root
      expire: False

    # Other settings
    resize_rootfs: True
    ssh_pwauth: True
    timezone: Australia/Sydney

    # Add any ssh public keys
    ssh_authorized_keys:
     - $(cat $buildmnt/root/.ssh/id_rsa.pub)

    bootcmd:
     - [ sh, -c, echo "=========bootcmd=========" ]

    runcmd:
     - [ sh, -c, echo "=========runcmd=========" ]

    final_message: "SYSTEM READY TO LOG IN"
    EOF

  - |
    $BUILDAH_RUN $buildcntr genisoimage -output my-seed.iso \
                                        -volid cidata \
                                        -joliet \
                                        -rock user-data meta-data

  # tag the current container
  - $BUILDAH_COMMIT $buildcntr $CI_REGISTRY_IMAGE/qemu-mkosi-base:$QEMU_TAG

  # clean up the working container
  - buildah rm $buildcntr

  - podman images

  # bug when pushing 2 tags in the same repo with the same base,
  # this may fail. Just retry it after
  - podman push $CI_REGISTRY_IMAGE/qemu:$QEMU_TAG || true
  - podman push $CI_REGISTRY_IMAGE/qemu-mkosi-base:$QEMU_TAG || true
  - sleep 2
  - podman push $CI_REGISTRY_IMAGE/qemu:$QEMU_TAG
  - podman push $CI_REGISTRY_IMAGE/qemu-mkosi-base:$QEMU_TAG
